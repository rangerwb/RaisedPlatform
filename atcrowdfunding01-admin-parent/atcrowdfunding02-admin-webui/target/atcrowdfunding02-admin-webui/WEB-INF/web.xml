<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE web-app PUBLIC
        "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
        "http://java.sun.com/dtd/web-app_2_3.dtd" >

<web-app xmlns="http://java.sun.com/xml/ns/javaee"
         version="2.5"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd">
    <display-name>Archetype Created Web Application</display-name>

    <session-config>
        <session-timeout>60</session-timeout>
    </session-config>

    <!-- 配置ContextConfigListener，加载Spring配置文件 -->
    <!-- contextConfigLocation需要的内容 -->
    <!--<context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>classpath:spring-persist-*.xml</param-value>
    </context-param>

    &lt;!&ndash; 将ContextLoaderListener加入容器&ndash;&gt;
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>-->

    <filter>
        <filter-name>CharacterEncodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <!-- 指定字符集 -->
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
        <!-- 强制请求设置字符集 -->
        <init-param>
            <param-name>forceRequestEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
        <!-- 强制响应设置字符集 -->
        <init-param>
            <param-name>forceResponseEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>

    <!-- 这个filter执行的顺序要在所有其他Filter之前 -->
    <!-- 原因如下：
            request.setCharacterEncoding(encoding)必须在request.getParameter()前面
            response.setCharacterEncoding(encoding)必须在request.getWriter()前面
    -->
    <filter-mapping>
        <filter-name>CharacterEncodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <servlet>
        <servlet-name>springDispatcherServlet</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:spring-*.xml</param-value>
        </init-param>
        <!-- Servlet默认生命周期中，创建对象是第一次接受到请求时 -->
        <!-- DispatcherServlet创建对象后有大量的框架初始化工作，不适合在第一次请求时来做 -->
        <!-- 这样设置就是为了让DispatcherServlet在web应用启动时创建对象、初始化 -->
        <load-on-startup>1</load-on-startup>
    </servlet>

    <servlet-mapping>
        <servlet-name>springDispatcherServlet</servlet-name>
        <!-- 1. 表示拦截所有请求 -->
        <url-pattern>/</url-pattern>
        <!--2. 配置请求扩展名
            优点：
                1. .css .js .png等等静态资源完全不经过springmvc，不需要特殊处理
                2. 实现伪静态效果。表面上看起来访问一个html文件这样的静态资源，但实际上是经过java代码运算过的
                        作用：给黑客入侵增加难度   利于SEO优化（让搜索引擎更容易找到我们项目）
            缺点：
                不符合RESTFul风格
        -->
        <url-pattern>*.html</url-pattern>
        <!-- 如果一个Ajax请求扩展名是html，但实际服务器返回的是json数据，二者不匹配，会出现406错误 -->
        <!-- 为了让Ajax请求能够顺利拿到JSON格式的响应数据，需要另外配置json扩展名 -->
        <url-pattern>*.json</url-pattern>
    </servlet-mapping>

    <filter>
        <filter-name>springSecurityFilterChain</filter-name>
        <filter-class>org.springframework.web.filter1.DelegatingFilterProxy</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>springSecurityFilterChain</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

</web-app>
