<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.atguigu.crowd.mapper.AdminMapper">
    <resultMap id="BaseResultMap" type="com.atguigu.crowd.entity.Admin">
        <id column="id" property="id" jdbcType="INTEGER"/>
        <result column="login_acct" property="loginAcct" jdbcType="VARCHAR"/>
        <result column="user_pswd" property="userPswd" jdbcType="CHAR"/>
        <result column="user_name" property="userName" jdbcType="VARCHAR"/>
        <result column="email" property="email" jdbcType="VARCHAR"/>
        <result column="create_time" property="createTime" jdbcType="CHAR"/>
    </resultMap>

    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>

    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>

    <sql id="Base_Column_List">
        id, login_acct, user_pswd, user_name, email, create_time
    </sql>

    <select id="selectAdminByKeyword" resultMap="BaseResultMap">
        select id, login_acct, user_pswd, user_name, email, create_time
        from t_admin
        where login_acct like concat("%", #{keyword}, "%") or
        user_name like concat("%", #{keyword}, "%") or
        email like concat("%", #{keyword}, "%")
    </select>
    <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.atguigu.crowd.entity.AdminExample">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from t_admin
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer">
        select
        <include refid="Base_Column_List"/>
        from t_admin
        where id = #{id,jdbcType=INTEGER}
    </select>

    <delete id="deleteOldRelationship" parameterType="java.lang.Integer">
        delete from inner_admin_role where admin_id=#{adminId}
    </delete>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
        delete from t_admin
        where id = #{id,jdbcType=INTEGER}
    </delete>
    <delete id="deleteByExample" parameterType="com.atguigu.crowd.entity.AdminExample">
        delete from t_admin
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>

    <!--select t2.dept_name as '部门', t2.name as '姓名', t1.A as '工作业绩评分（0-100分）权重40%',
    t1.B as '价值观评分（0-100分）权重30%',t1.C as '专业能力评分（0-100分）权重10%',t1.gmt_create as '创建时间'
    from (
        select t01.target_user,t01.A,t01.B,t02.score C,t01.gmt_create
        from (
            select t001.target_user,t001.score A,t002.score B,t001.gmt_create,t001.batch
            from (
                SELECT target_user,score,gmt_create,batch
                from evaluate_score
                WHERE ITEM = '工作业绩'
            ) t001 join (
                SELECT target_user,score,batch
                from evaluate_score
                WHERE ITEM = '价值观'
            ) t002
            on t001.batch=t002.batch and t001.target_user=t002.target_user
        ) t01 join (
            SELECT target_user,score,batch
            from evaluate_score
            WHERE ITEM = '专业能力'
        ) t02
        on t01.batch=t02.batch and t01.target_user=t02.target_user
    ) t1 left join (
        select evaluate_user.id,evaluate_user.name, evaluate_dept.name dept_name
        from evaluate_user left join evaluate_dept
        on evaluate_user.dept=evaluate_dept.id
        where evaluate_dept.name is not null
    ) t2
    on t1.target_user=t2.id
    where t2.name is not null-->

    <insert id="insertNewRelationship">
        insert into inner_admin_role(admin_id, role_id) values
        <foreach collection="roleIdList" item="roleId" separator=",">(#{adminId}, #{roleId})</foreach>
    </insert>
    <insert id="insert" parameterType="com.atguigu.crowd.entity.Admin">
        insert into t_admin (id, login_acct, user_pswd,
        user_name, email, create_time
        )
        values (#{id,jdbcType=INTEGER}, #{loginAcct,jdbcType=VARCHAR}, #{userPswd,jdbcType=CHAR},
        #{userName,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR}, #{createTime,jdbcType=CHAR}
        )
    </insert>
    <insert id="insertSelective" parameterType="com.atguigu.crowd.entity.Admin">
        insert into t_admin
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="loginAcct != null">
                login_acct,
            </if>
            <if test="userPswd != null">
                user_pswd,
            </if>
            <if test="userName != null">
                user_name,
            </if>
            <if test="email != null">
                email,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=INTEGER},
            </if>
            <if test="loginAcct != null">
                #{loginAcct,jdbcType=VARCHAR},
            </if>
            <if test="userPswd != null">
                #{userPswd,jdbcType=CHAR},
            </if>
            <if test="userName != null">
                #{userName,jdbcType=VARCHAR},
            </if>
            <if test="email != null">
                #{email,jdbcType=VARCHAR},
            </if>
            <if test="createTime != null">
                #{createTime,jdbcType=CHAR},
            </if>
        </trim>
    </insert>


    <select id="countByExample" parameterType="com.atguigu.crowd.entity.AdminExample" resultType="java.lang.Integer">
        select count(*) from t_admin
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>


    <update id="updateByExampleSelective" parameterType="map">
        update t_admin
        <set>
            <if test="record.id != null">
                id = #{record.id,jdbcType=INTEGER},
            </if>
            <if test="record.loginAcct != null">
                login_acct = #{record.loginAcct,jdbcType=VARCHAR},
            </if>
            <if test="record.userPswd != null">
                user_pswd = #{record.userPswd,jdbcType=CHAR},
            </if>
            <if test="record.userName != null">
                user_name = #{record.userName,jdbcType=VARCHAR},
            </if>
            <if test="record.email != null">
                email = #{record.email,jdbcType=VARCHAR},
            </if>
            <if test="record.createTime != null">
                create_time = #{record.createTime,jdbcType=CHAR},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update t_admin
        set id = #{record.id,jdbcType=INTEGER},
        login_acct = #{record.loginAcct,jdbcType=VARCHAR},
        user_pswd = #{record.userPswd,jdbcType=CHAR},
        user_name = #{record.userName,jdbcType=VARCHAR},
        email = #{record.email,jdbcType=VARCHAR},
        create_time = #{record.createTime,jdbcType=CHAR}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="com.atguigu.crowd.entity.Admin">
        update t_admin
        <set>
            <if test="loginAcct != null">
                login_acct = #{loginAcct,jdbcType=VARCHAR},
            </if>
            <if test="userPswd != null">
                user_pswd = #{userPswd,jdbcType=CHAR},
            </if>
            <if test="userName != null">
                user_name = #{userName,jdbcType=VARCHAR},
            </if>
            <if test="email != null">
                email = #{email,jdbcType=VARCHAR},
            </if>
            <if test="createTime != null">
                create_time = #{createTime,jdbcType=CHAR},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.atguigu.crowd.entity.Admin">
        update t_admin
        set login_acct = #{loginAcct,jdbcType=VARCHAR},
        user_pswd = #{userPswd,jdbcType=CHAR},
        user_name = #{userName,jdbcType=VARCHAR},
        email = #{email,jdbcType=VARCHAR},
        create_time = #{createTime,jdbcType=CHAR}
        where id = #{id,jdbcType=INTEGER}
    </update>
</mapper>